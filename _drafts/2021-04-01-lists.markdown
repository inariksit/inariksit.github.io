---
layout: post
title:  "Lists in GF"
date:   2021-02-01
categories: gf
tags: "gf programming"
---

<!-- <em><small>This post is linked from the [GF reference manual](http://www.grammaticalframework.org/doc/gf-refman.html). Feel free to adapt this text into a proper section. I'd do it myself if I were capable of writing short posts. :-P</small></em> -->

This post is about lists in GF. It's aimed for multiple audiences, so possibly some parts won't interest you. If you have a good grasp of the basics, feel free to jump directly to [Advanced topics](TODO).

<!-- markdown-toc start - Don't edit this section. Run M-x markdown-toc-refresh-toc -->
**Table of Contents**

- [Basics](#basics)
- [Lists in natural language](#lists-in-natural-language)
- [Lists in formal language](#lists-in-formal-language)
- [Advanced topics](#advanced-topics)

<!-- markdown-toc end -->


## Basics

Quoting from the [GF book](TODO).

> #### C.4.3 List categories
> Since categories of lists of elements of another category are a common idiom, the following syntactic sugar is available:
> ```haskell
> cat [C] {n}
> ```
> abbreviates a set of three judgements:
> ```haskell
> cat ListC ;
> fun BaseC : C -> ... -> C -> ListC ; --n C’s
> fun ConsC : C -> ListC -> ListC
> ```
>
> The functions `BaseC` and `ConsC` are automatically generated in the abstract syntax, but their linearizations, as well as the linearization type of `ListC`,
> must be defined manually. The type expression `[C]` is in all contexts interchangeable with `ListC`.

### Choice of `n`

The parameter `n` in `cat [C]{n}` determines the size of the base list. For instance,

```haskell
cat [C]{1}
```

generates the following functions:

```haskell
BaseC : C -> ListC
ConsC : C -> ListC -> ListC
```

Likewise,

```haskell
cat [C]{0}
```

generates the following functions:

```haskell
BaseC : ListC
ConsC : C -> ListC -> ListC
```

In fact, the choice of `n` only affects the `BaseC` function. `ConsC` is always the same, adding a single `C` to an already existing list.

If you're used to lists from other programming languages, you might wonder what's the purpose of `n > 0`.
An empty list is such a useful concept, why force the minimum size of a list to be 1, 2 or even more?

The answer is that it depends on an application. In the next sections, I'll cover the use of lists for natural and formal languages.


## Lists in natural language

The purpose of lists in the [Resource Grammar Library](http://www.grammaticalframework.org/lib/doc/synopsis/index.html) (RGL) is to allow coordination. I'll start with an example and explain the functions right after.
<!-- Consider `NP` like “John, Mary, Alice, Bob and Charlie”. Instead of specific rules for NPs with 1, 2, 3… nouns, lists offer a general way to include arbitrarily many. -->
<!-- so you don’t need a different syntactic function for , but just one for an `NP` object, which you can build out of a `ListNP`. -->

### Baseline: single NP

Here's the RGL API and the underlying tree for "I walk". No lists yet, this is just for comparison.

```haskell
-- RGL API, what you'd write in application grammar
lin I_walk_Cl = mkCl i_NP walk_V ;

-- Underlying RGL tree
  PredVP              -- : NP -> VP -> Cl
    (UsePron i_Pron)  -- : NP
    (UseV walk_V)     -- : VP
  -- : Cl
```

If you've only ever used the RGL API and never seen `PredVP`, `UsePron` etc. before, you can read [an explanation here](../../02/15/rgl-api-core-extensions.html). Knowing the RGL abstract syntax is not necessary for writing application grammars, but for this deep dive post, it's useful to understand that the two levels exist.
<!-- you can safely ignore the underlying RGL tree. But if you're interested in writing or improving resource grammars, it's good to know the RGL abstract syntax. -->

### List of NPs

Here's the corresponding GF code for “they, you and I walk”. This time, the subject is constructed from a list of three `NP`s, which are put back together into one `NP`.

```haskell
-- RGL API, what you'd write in application grammar
lin They_You_and_I_walk_Cl =
   mkCl
     (mkNP and_Conj
           (mkListNP they_NP
                     (mkListNP you_NP
                               i_NP)
           )  -- : ListNP
     ) -- : NP
     walk_V ;
```

The RGL API [overloads the `mkListNP` oper](http://www.grammaticalframework.org/lib/doc/synopsis/index.html#ListNP). In the underlying RGL abstract syntax tree, we see their true names `BaseNP` and `ConsNP`.

```haskell
-- Underlying RGL tree
{- PredVP
    (ConjNP and_Conj -}
            (ConsNP (UsePron they_Pron)
                    (BaseNP (UsePron you_Pron)
                            (UsePron i_Pron))
            )  -- : ListNP
--  ) -- : NP
-- (UseV walk_V)
```

As long as you have `GF_LIB_PATH` set up, you can open the RGL abstract syntax in the GF shell and run the commands below.

```
$ gf alltenses/LangEng.gfo
…
Lang> l PredVP (ConjNP and_Conj (ConsNP (UsePron they_Pron) (BaseNP (UsePron youSg_Pron) (UsePron i_Pron)))) (UseV walk_V)
```


### In RGL, `n = 2`
Looking at the examples, we see that the base list size in RGL is 2.
We saw that the first (innermost) `mkListNP` was applied to two arguments:

```haskell
(mkListNP you_NP i_NP)
```

And that translated to a `BaseNP`, which took 2 arguments. So we know that `BaseNP` and `ConsNP` are automatically generated from the following expression.

```haskell
cat [NP]{2}
```

<!-- In the RGL abstract syntax tree, we see the actual `BaseNP`, which is generated from -->

<!--     BaseNP (UsePron you_Pron) (UsePron i_Pron) -->

Lists for less than 2 aren't needed in the RGL.
<!-- For one subject NP, we can just use the NP directly, like in the tree for "I walk".  -->
If we had `n = 1`, even a single NP could be a list, like in the following.


<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mkCl</span>
  <span class="err">(mkNP and_Conj (mkListNP i_NP))</span>
  <span class="n">walk_V</span>
</code></pre></div></div>

<!-- ```haskell -->
<!-- mkCl -->
<!--   --(mkNP and_Conj (mkListNP i_NP)) -->
<!--   walk_V -->
<!-- ``` -->

<!-- <div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">PredVP</span> -->
<!--   <span class="err">(</span><span class="err">ConjNP </span><span class="err">and_Conj </span><span class="err">(</span><span class="err">BaseNP </span><span class="err">(</span><span class="err">UsePron </span><span class="err">i_Pron</span><span class="err">)))</span> -->
<!--   <span class="p">(</span><span class="kt">UseV</span> <span class="n">walk_V</span><span class="p">)</span> -->
<!-- </code></pre></div></div> -->

  <!-- <span class="err">(</span><span class="err">UseV </span><span class="err">walk_V</span><span class="err">)</span> -->

<!-- ```haskell -->
<!-- PredVP -->
<!--   (ConjNP and_Conj (BaseNP (UsePron i_Pron))) -->
<!--   (UseV walk_V) -->
<!-- ``` -->

<!-- Zero subject NPs is even weirder.  -->

But why write `mkNP and_Conj (mkListNP i_NP)`, when you can just write `i_NP`?
Clearly, we only start needing lists when we want to coordinate 2 or more elements.


### Back to `C` from `ListC`: introducing `ConjC`

<!-- We've seen how to construct lists with `mkListNP` -->
<!-- We've already seen `mkNP and_Conj` applied to a `ListNP` -->

<!-- We've already seen how to construct lists in the RGL. Next, we want to put a `ListC` back to a `C`. -->

For all categories `C` that have a `ListC`, the RGL includes a corresponding function

```haskell
ConjC : Conj -> ListC -> C
```

which turns a list back into a single instance of the category, with the help of a conjunction. For example, "[Alice, Bob, Charlie]" is a list of NPs, whereas "Alice, Bob and Charlie" is a single NP.
<!-- , and can be used anywhere that just "Alice" can be used. -->

Notice that `ConjC` is different from `BaseC` and `ConsC`, which are derived automatically whenever `ListC` is defined. In contrast, `ConjC` is manually defined in the RGL.

#### ConjC in the API: just another instance of mkC

In the RGL API, all these `ConjC` funs are accessible from `mkC`. Here are two versions of `mkNP`, which under the hood call `ConjNP`:

<a href="http://www.grammaticalframework.org/lib/doc/synopsis/index.html#NP"><img src="/images/mkNP-for-Conj-ListNP.png" alt="Screenshot of the RGL API, showing mkNP : Conj -> NP -> NP -> NP" /></a>

If you only want to coordinate two `NP`s, you can skip constructing `ListNP`, and call `mkNP` directly for a conjunction and two NPs.

```haskell
-- RGL API
mkNP or_Conj i_NP they_NP
mkNP or_Conj (mkListNP i_NP they_NP)

-- both correspond to the RGL abstract syntax
ConjNP or_Conj (BaseNP i_NP they_NP)
```

#### Conj

Naturally, RGL also includes the category `Conj`, with examples such as

```haskell
and_Conj : Conj ;
or_Conj  : Conj ;
```

#### DConj ("both ﹍ and ﹍")

In the `Conj` category, there are also conjunctions that put a string before the list.

```haskell
both7and_DConj  : Conj ; -- both...and
either7or_DConj : Conj ; -- either...or
```

For instance,

```
mkNP either7or_DConj everybody_NP nobody_NP
```

returns "either everybody or nobody".


### Implementation of `ListC` in RGL

<!-- _This section is useful if you want to implement a resource grammar. If you only want to use the RGL API, you can skip this._ -->

`ListC` is usually implemented as exactly like the lincat of `C`, but with two `s` fields, called `s1` and `s2`.

For example, if `C` is defined as

```haskell
lincat C   = {s     : Number => Str ; g : Gender} ;
```

then `ListC` will split its `s` field into two, and retain its other fields as

```haskell
lincat [C] = {s1,s2 : Number => Str ; g : Gender} ;
```


You can see examples in [ConjunctionEng](https://github.com/GrammaticalFramework/gf-rgl/blob/master/src/english/ConjunctionEng.gf#L52-L61):

```haskell
lincat
  [S] = {s1,s2 : Str} ;
  [Adv] = {s1,s2 : Str} ;
  [NP] = {s1,s2 : NPCase => Str ; a : Agr} ;
  [AP] = {s1,s2 : Agr => Str ; isPre : Bool} ;
  [RS] = {s1,s2 : Agr => Str ; c : NPCase} ;
  [CN] = {s1,s2 : Number => Case => Str} ;
```

If you look at the lins of a given Conjunction module, it probably looks rather cryptic. Most of it is just calling opers like `twoTable` and `consTable`. These opers, and many more, are found in the module [gf-rgl/prelude/Coordination.gf](https://github.com/GrammaticalFramework/gf-rgl/blob/master/src/prelude/Coordination.gf).

The only documentatio of Coordination (that I'm aware of) is in the comments of the module itself, [for example](https://github.com/GrammaticalFramework/gf-rgl/blob/master/src/prelude/Coordination.gf#L17-L22):

```haskell
-- Create a ListX from two Xs. Example:
--     x = {s = "here"} ;
--     y = {s = "there"} ;
-- twoSS x y ==> {s1 = "here" ; s2 = "there"}
twoSS : (_,_ : SS) -> ListX = \x,y -> twoStr x.s y.s ;
```
It's likely that the opers still look very cryptic, so as prerequisite knowledge, you should read the first half of [this post on types in GF](../../../2018/12/28/dependent-types.html). You can stop when you see the subheading "Dependent types".

If you're implementing a new resource grammar and are struggling to understand Conjunction, the best way is to look at other languages' implementation of Conjunction, and read the comments of Coordination.
<!-- The [Resource Grammar Tutorial](http://www.grammaticalframework.org/lib/doc/rgl-tutorial/index.html) on thew GF home page doesn't explicitly cover  -->
Later on, I might add a section in this post to be more of a hands-on guide for resource grammarians, but for now I've prioritised other things.

## Lists in formal language

Suppose that I'm defining my own object-oriented programming language. Here's a class definition:

```ruby
class Business = {
  bus_name : String ;
  is_legal : Boolean ;
  } ;
```

Let's ignore any other language constructs for the sake of this example, and just concentrate on the class definition.

All classes should have a name, and some amount of fields. I'm also happy to accept an empty class, with no fields---that'd just be written as follows:

```ruby
class Business ;
```

Since this whole blog post is about lists, you might see where this is going.


### Abstract syntax

Here's my abstract syntax for the GF grammar which describes this programming language fragment.

```haskell
abstract MyOOP = {
  cat
    Class ;      -- class ClassName : { [Field] }

    Field ;      -- field_name : BuiltinType
    [Field]{0} ; -- generates funs BaseField, ConsField

    BuiltinType ;

  fun
    ClassDef : String -> [Field] -> Class ;
    MkField : String -> BuiltinType -> Field ;

    BoolType, StringType : BuiltinType ;
}
```

In this case, it's a good idea to allow an empty list. If I had done like in the RGL, and made the minimum size of `[Field]` >0, then I would've needed two versions of `ClassDef`: one for 0 fields, other for >0 fields. Instead, with `[Field]{0}`, I can express empty and non-empty classes with the same fun.

### Concrete syntax

I still want to print out different strings for empty and non-empty classes. But that's no problem---I just make a parameter for it. Here's my concrete syntax.

```haskell
concrete MyOOPCnc of MyOOP = {
  lincat
    [Field] = {s : Str ; isEmpty : IsEmpty} ;

  param
    IsEmpty = Empty | NonEmpty ;

  lin
    -- : String -> [Field] -> Class ;
    ClassDef name flds = {
      s = "class" ++ name.s ++
             case flds.isEmpty of {
               Empty    => flds.s ; -- just empty string
               NonEmpty => "= {" ++ flds.s ++ "}"
             } ++ ";"
      } ;

    -- : String -> BuiltinType -> Field ;
    MkField name typ = {s = name.s ++ ":" ++ typ.s} ;

    -- : BuiltinType ;
    BoolType = {s = "Boolean"} ;
    StringType = {s = "String"} ;

-- These funs automatically generated from [Field]{0}
    -- : [Field]
    BaseField = {s = [] ; isEmpty = Empty} ;

    -- : Field -> [Field] -> [Field]
    ConsField f fs =
      let sep : Str = case fs.isEmpty of {
                        Empty => [] ;
                        NonEmpty => ";" } ;
       in {s = f.s ++ sep ++ fs.s ; isEmpty = NonEmpty} ;
}
```

I'm using the parameter `IsEmpty` twice:
* In `ClassDef` to decide whether to print `= { }` after the class name.
* In `ConsField` to decide whether to put `;` after the first argument.

That's all I need to make `ClassDef` handle empty and non-empty lists.

_Side note: in `ClassDef`, I use the string from `flds` even when `flds` is empty, and only contains the empty string. The reason is explained [in my gotchas post](../../../2018/08/28/gf-gotchas.html#metavariables-or-those-question-marks-that-appear-when-parsing). In GF, every argument needs to contribute with a string, otherwise it isn’t recognised when parsing. This happens even if there is no ambiguity._

### Natural language concrete

Next, I want to do a natural language interface in my programming language! Wouldn't this be cool:

```
> p "class Business ;" | l -lang=Eng
Business is a class with no fields

> p "class Business = { is_legal : Boolean } ;" | l -lang=Eng
Business is a class with a Boolean field is_legal

> p "class Business = { is_legal : Boolean ; bus_name : String } ;" | l -lang=Eng
Business is a class with fields is_legal of type Boolean and bus_name of type String
```

English presents new challenges with lists of different sizes. But there's still nothing to worry about: the English concrete just needs to use a different set of internal params. Here's a fragment:

```haskell
ClassDef name fields =
 let classname : NP = symb name ;
     with_fields : Adv = case fields.size of {
       Zero => mkAdv with_Prep (mkNP noPl_Det field_N) ;
       One  => withField fields.firstField ;
       Many => withField fields.s
     } ;
     descr : NP = mkNP a_Det (mkCN class_N with_fields)
 in mkS (mkCl classname descr) ;
```

You can see that I'm using a three-valued parameter for list size, for the cases 0, 1 or >2. I chose those cases, because I wanted to use three different verbalisation strategies:
* no fields
* a [type] field [name]
* fields [name1] of type [type1], … and [nameN] of type [typeN]

I'm not going to paste the whole English concrete, but you can see everything---the abstract and the two concretes---in [this link](https://gist.github.com/inariksit/76e34b5746ab1d13ec7dcd5cf0b7eb19).


## Advanced topics

You probably find lists in GF more restricted than you’re used to in other languages. For instance, you can't retain the individual elements---they just get concatenated into one long string, separated by commas in the RGL, or a separator of your choice in programming languages. So you can't peek into a list and decide, for an arbitrary `n`, “if the `n`<sup>th</sup> element has parameter `Foo`, then do something”.



Korean RG
